AWSTemplateFormatVersion: 2010-09-09
Description: >
  Taller Estudio Maikol Gonzalez
# Actualizado 0208-2020
#Nota: El nombre que se le da al Stack es el AW/Nompre del proyecto/Ambiente/ Y nombre del codigo. Ejemplo aw0434001-murex-core-dev-AutoEstudio
Parameters: # Creo Los Parametros que quiero llamar desde los recursos
#Parametros Banco
  pApplicationCode:
    Description: Codigo de la aplicacion.
    Type: String
    Default: aw0434001

  pBussiness:
    Description: Unidad de Negocio de la de la aplicacion.
    Type: String
    Default: tesoreria

  pCostCenter:
    Description: Centro Costos del proyecto.
    Type: String
    Default: c103500025

  pEnvironment:
    Description: Environment where it unfolds.
    Type: String
    Default: dev
    AllowedValues:
        - dev
        - qa
        - pdn

  pPMO:
    Description: Pmo de proyecto
    Type: String
    Default: pmo30686

  pProjectName:
    Description: Nombre del proyecto.
    Type: String
    Default: murex-core

#Parametros Propios

  pVPCRango: # Rango de ip que le doy a mi VPC 
    Description: Defino el rango de direcciones IP que le doy a mi VPC
    Type: String  
    Default: 10.0.0.0/16

  pSubnetRangoPrivado: # Parametro para la subnet privada
    Description: Rango de IP que le defino a mi subnet Privada
    Type: String
    Default: 10.0.0.0/24

  pSubnetRangoPublico: # Parametro para la subnet publica
    Description: Rango de IP que le defino a mi subnet Publica
    Type: String
    Default: 10.0.1.0/24

  pSubnetRangoPublico2: # Parametro para la subnet publica
    Description: Rango de IP que le defino a mi subnet Publica2
    Type: String
    Default: 10.0.2.0/24

  pEC2Key: # llave para subir instancias
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: Maikol-llave-CloudFormation

  pAMI1: 
    Description: EC2 Instance AMI Windows
    Type: AWS::EC2::Image::Id
    Default: ami-02411807d32ce7b14

  pAMI2: 
    Description: EC2 Instance AMI Linux
    Type: AWS::EC2::Image::Id
    Default: ami-0e92078a9e50310c7

  pTipoDeInstancia: 
    Description: Tipo de instancia que levantara la AMI
    Type: String
    Default: t2.micro
    AllowedValues:
        - t2.micro
        - t2.nano
        - t2.small

Resources: #===== Creo Los Recursos=====
# Todos los recursos los encuentro en la pagina de AWS
#https://docs.aws.amazon.com/es_es/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
# En la pagina podemos observar que propiedades son o no obligatrorias para cada uno de los recursos
################################################################################################################################################
#===== CREO LA VPC=====
  rMYVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref pVPCRango # Corresponde al bloque de CIDR IPv4 principal para la VPC. Definido como parametro
      EnableDnsHostnames: true # Especifica si las instancias lanzadas en la VPC obtienen nombres de host de DNS. Si está habilitada, las instancias de la VPC obtienen nombres de host de DNS; de lo contrario, no. Deshabilitado de forma predeterminada para las VPC no predeterminadas
      EnableDnsSupport: true   # Indica si la VPC admite la resolución de DNS. Si se activa, las consultas al servidor DNS proporcionado por Amazon en la dirección IP 169.254.169.253 o la dirección IP reservada en la base del rango de red IPv4 de la VPC más dos se realizarán correctamente. Si se desactiva, el servidor DNS proporcionado por Amazon en la VPC que resuelve nombres de host DNS públicos en las direcciones IP no estará habilitado. 
      InstanceTenancy: default     #La tenencia permitida de instancias lanzadas en la VPC."default": una instancia lanzada en la VPC se ejecuta en hardware compartido de forma predeterminada, a menos que se especifique explícitamente una tenencia distinta durante el lanzamiento de la instancia.
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "VPC" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

################################################################################################################################################

#===== CREO GRUPO DE SEGURIDAD=====
  rMySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Genero un grupo de seguridad asociacio a la VPC y habilito reglas de salida y entrada
      GroupName: SG Instancias  #Nombre del grupo de seguridas
      VpcId:
        Ref: rMYVPC          # Hago referencia al recurso VPC
      #Las reglas de entrada asociadas al grupo de seguridad, configuro dos reglas
      SecurityGroupIngress: 
      - IpProtocol: tcp     # Nombre (tcp, udp, icmp, icmpv6)  O Utilice -1 para especificar todos los protocolos. Si obligatorio
        FromPort: 22        #Comienzo del rango de puertos para los protocolos TCP y UDP. No obligatorio. Puerto 22 acceder a maquina SSH
        ToPort: 22          #Fin del intervalo de puertos de los protocolos TCP y UDP - No obligatorio
        CidrIp: 0.0.0.0/0   #Los intervalos de IPv4. No obligatorio
      - IpProtocol: tcp     # Nombre (tcp, udp, icmp, icmpv6)  O Utilice -1 para especificar todos los protocolos. Si obligatorio
        FromPort: 80        #Comienzo del rango de puertos para los protocolos TCP y UDP. No obligatorio. Puerto 80 navegación web
        ToPort: 80          
        CidrIp: 0.0.0.0/0   #Los intervalos de IPv4. No obligatorio
      - IpProtocol: tcp
        FromPort: 3389      # Este puerto debe ser habilitado en caso de querer acceder a una maquina EC2 Windows   
        ToPort: 3389
        CidrIp: 0.0.0.0/0  
      #Las reglas de salida asociadas al grupo de seguridad, configuro 2 reglas
      SecurityGroupEgress: 
      - IpProtocol: tcp
        FromPort: 80        #Comienzo del rango de puertos para los protocolos TCP y UDP. No obligatorio. Puerto 80 navegación web
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443        #Comienzo del rango de puertos para los protocolos TCP y UDP. No obligatorio. Puerto 443 salida HTTPS Para que el servidor pueda ir a internet
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 200        #Puerto 200 garantiza la entrega de paquetes de datos en la misma orden, en que fueron mandados
        ToPort: 200
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "SecurityGroup" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

################################################################################################################################################

#===== CREO INTERNET GATEWAY=====    
  rMyInternetGateway:   #Asigna una gateway de Internet que se debe usar con una VPC. Da salida a internet a una subnet publica
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "InternetGatway" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

#===== ATACHO INTERNET GATEWAY A MI VPC=====   
  rInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref rMyInternetGateway  # ID de la gateway de Internet.
      VpcId: !Ref rMYVPC    # Es el ID de la VPC.
#     VpnGatewayId: !Ref   # Debe especificar InternetGatewayId o VpnGatewayId, pero no ambos. como tengo el ID del IG por eso no es necesario si ya existiera en consola utilizo este

################################################################################################################################################

#=====CREO LAS SUBNET  privada y dos publicas en diferentes zonas de disponibilidad=====
  rMYSubnetPrivada:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rMYVPC # El ID de la VPC en la que se encuentra la subred. Llamo el recurso creado
      CidrBlock: !Ref pSubnetRangoPrivado  # Asigno el segmento de red publico definido como parametro
      AvailabilityZone: "us-east-1a" # Asigno la zona de disponibilidad de la subred us-east-1a (use1-az2)
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "SubnetPrivada" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

#--------------------------------------------------------------------------------------
  rMYSubnetPublica:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rMYVPC # El ID de la VPC en la que se encuentra la subred. Llamo el recurso creado
      CidrBlock: !Ref pSubnetRangoPublico # Asigno el segmento de red publico definido como parametro
      AvailabilityZone: "us-east-1b" # Asigno la zona de disponibilidad de la subred us-east-1b (use1-az4)
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "SubnetPublica1" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName


  rMYSubnetPublica2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rMYVPC # El ID de la VPC en la que se encuentra la subred. Llamo el recurso creado
      CidrBlock: !Ref pSubnetRangoPublico2 # Asigno el segmento de red publico definido como parametro
      AvailabilityZone: "us-east-1c" # Asigno la zona de disponibilidad de la subred us-east-1b (use1-az4)
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "SubnetPublica2" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName


################################################################################################################################################

#===== CREO ELASTIC IP=====   Una dirección IP elástica es una dirección IPv4 pública, a la que se puede tener acceso desde Internet. La creamos para poder crear el NAT GATWAY con el cual daremos salida a internet a instancias creadas en subnets privadas
  rElasticIP:
    Type: AWS::EC2::EIP
    DependsOn: rInternetGatewayAttachment  # Acá estoy diciendo no creé la IP Elastica hasta que el atachado de del Internet Gateway este listo con la VPC
    Properties:
      Domain: rMYVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "ElasticIP" ]] 
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName


#===== CREO NAT GATEWAY=====   Utilice una gateway NAT para permitir que las instancias de una subred privada se conecten a Internet o a otros servicios de AWS, pero impedir que Internet inicie una conexión con dichas instancias. 
#Importante tener presente: se debe comprender el concepto de que acá hago referencia a la subnet publica y es desde la asociación de las tablas de enrutamiento privadas que asocio el NatGatway que a su vez ya apunta a la subnet publica
  rNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt rElasticIP.AllocationId  # Comprendí esta linea en https://docs.aws.amazon.com/es_es/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html
      SubnetId: !Ref rMYSubnetPublica
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "NatGateway" ]]  
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

################################################################################################################################################
##########################################################Configuraciones TABLAS DE ENRUTAMIENTO ##############################################
#===== CREO TABLA DE ENRUTAMIENTO Privado=====
  rmyRouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: rMYVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "TablaPrivada" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

#===== CREO TABLA DE ENRUTAMIENTO Publico=====
  rmyRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: rMYVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "TablaPublica" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

#-----Asociación de Tablas a Subnets
#===== EN LAS TABLAS DE ENRUTAMIENTO, ASOCIO LA SUBNET PRIVADA A LA TABLA DE ENRUTAMIENTO PRIVADA=====
  rPrivateSubAsociRT:   # Asociación de la subnet privada al router table Privado
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: rMYSubnetPrivada
      RouteTableId:
        Ref: rmyRouteTablePrivate #Llamo mi tabla de enrutamiento privada

#-----Asociación de Tablas a Subnets
#===== EN LAS TABLAS DE ENRUTAMIENTO, ASOCIO LAS SUBNET PUBLICAS A LA TABLA DE ENRUTAMIENTO PUBLICA=====
  rPublicSubAsociRT:   # Asociación de la subnet Publica al Router Table Publico
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: rMYSubnetPublica    
      RouteTableId:
        Ref: rmyRouteTablePublic    # llamo mi tabla de enrutamiento publica

  rPublicSub2AsociRT:   # Asociación de la subnet Publica al Router Table Publico
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: 
        Ref: rMYSubnetPublica2
      RouteTableId:
        Ref: rmyRouteTablePublic   # llamo mi tabla de enrutamiento publica

#-----Reglas
#=====  Creamos una regla que le permita la salida a internet a las instancias que hagan parte de la tabla de enrutamiento publica=====
  rRoutePublic:
    Type: AWS::EC2::Route
    DependsOn: rInternetGatewayAttachment  # Estoy indicando que no cree este permiso hasta que no finalice el atachado de mi internet gatway con la VPC
    Properties:
      RouteTableId: 
        Ref: rmyRouteTablePublic    # Referencio la tabla publica
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: rMyInternetGateway     #Referencio mi internet Gatway 

#=====  Creamos una regla que le permita la salida a internet a las instancias que hagan parte de la tabla de enrutamiento privada=====
  rRoutePrivate:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: 
        Ref: rmyRouteTablePrivate     # Referencio la tabla privada
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: rNatGateway     #Referencio mi Nat Gatway

#=====  Creamos un ROL de IAM  con politicas que permitan el acceso a las EC2 por medio de Session Manager, sin necesidad de claves para SSH, de esta manera cuando no se tiene acceso a las claves se puede acceder a la instancia desde la consola=====
#https://docs.aws.amazon.com/es_es/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role--examples
  rmyROLIAM:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:  #La política de confianza asociada a este rol. Las políticas de confianza definen qué entidades puede asumir el rol. 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com             
                - ssm.amazonaws.com
            Action: 'sts:AssumeRole'
      Description:  Rol que permite el acceso de las EC2 por medio de Session Manager
      ManagedPolicyArns:        #Una lista de nombres de recursos de Amazon ARN de políticas de IAM administradas que desea asociar al usuario. Desde la consola en IAM se encuentran los ARN requeridos. Obligatorio: SI
        - 'arn:aws:iam::aws:policy/AdministratorAccess'  # Para poder acceder a cualquer recurso como desde una EC2 a S3
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore' # Para poder acceder a las EC2 por SSM
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
      Path: /     # Ruta del Rol Este parámetro es opcional. Si no se incluye, el valor predeterminado es una barra inclinada (/).
#      Policies:              # Agrega o actualiza un documento de política insertado que está integrado en la función de IAM especificada. Se pueden poner como un nuevo recurso AWS::IAM::Policy
      RoleName: !Join ["-", [ Ref: "AWS::StackName" , "ROLIAM" ]]  
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "InstanciaPublica1" ]]  
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

#===== Creo el Perfil para la instancia=====
#Una perfil de instancia es un contenedor de un rol de IAM, que puede utilizar para transferir información del rol a una instancia EC2 cuando la instancia se inicia.
  rPerfilROLIAM:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: Perfil-ROL-IAM-EC2
      Path: /                     # Este parámetro es opcional. Si no se incluye, el valor predeterminado es una barra inclinada (/).
      Roles:                      # El nombre del rol que se va a asociar al perfil de instancia. Solo se puede asignar un rol a la vez a una instancia EC2
        - Ref: rmyROLIAM

#===== Creando Instancia 1 Publica =====
  rEC2PublicOne:
    Type: AWS::EC2::Instance   
    DependsOn: rInternetGatewayAttachment  # Acá estoy diciendo no creé la instancia hasta que el atachado de del Internet Gateway este listo con la VPC
    Properties: 
      DisableApiTermination: false               # Permite terminar la instancia desde la consola de amazon EC2 y CLI
      IamInstanceProfile: !Ref rPerfilROLIAM          # El perfil de instancia de IAM.  Falla al quitar este comentario
      ImageId: !Ref pAMI1          # Es el ID de la AMI
      InstanceType: !Ref pTipoDeInstancia                     # El tipo de instancia.
      KeyName: !Ref pEC2Key                       # El nombre del par de claves.
      Monitoring: true                           # Especifica si la monitorización detallada está habilitada para la instancia.
      NetworkInterfaces:                        # Asignación automatica de una IP Publica: https://docs.aws.amazon.com/es_es/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
      - AssociatePublicIpAddress: true
        DeviceIndex: '0'                      # Si especifica una interfaz de red al lanzar una instancia, debe especificar el índice de dispositivo
        GroupSet:
        - !Ref rMySecurityGroup     # Los nombres de los grupo de seguridad
        SubnetId: !Ref rMYSubnetPublica             # El ID de la subred en la que se lanza la instancia.
        DeleteOnTermination: true              # Si se establece en true, la interfaz se elimina cuando se termina la instancia.
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "InstanciaPublica1" ]]  
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

  rEC2PublicTwo:
    Type: AWS::EC2::Instance   
    DependsOn: rInternetGatewayAttachment  # Acá estoy diciendo no creé la instancia hasta que el atachado de del Internet Gateway este listo con la VPC
    Properties: 
      DisableApiTermination: false               # Permite terminar la instancia desde la consola de amazon EC2 y CLI
      IamInstanceProfile: !Ref rPerfilROLIAM          # El perfil de instancia de IAM.  Falla al quitar este comentario
      ImageId: !Ref pAMI2                             # Es el ID de la AMI
      InstanceType: !Ref pTipoDeInstancia                     # El tipo de instancia.
      KeyName: !Ref pEC2Key                       # El nombre del par de claves.
      Monitoring: true                           # Especifica si la monitorización detallada está habilitada para la instancia.
      NetworkInterfaces:                        # Asignación automatica de una IP Publica: https://docs.aws.amazon.com/es_es/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
      - AssociatePublicIpAddress: true
        DeviceIndex: '0'                      # Si especifica una interfaz de red al lanzar una instancia, debe especificar el índice de dispositivo
        GroupSet:
        - !Ref rMySecurityGroup     # Los nombres de los grupo de seguridad
        SubnetId: !Ref rMYSubnetPublica2             # El ID de la subred en la que se lanza la instancia.
        DeleteOnTermination: true              # Si se establece en true, la interfaz se elimina cuando se termina la instancia.
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "InstanciaPublica2" ]]  
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

####################################### Construcción de recursos para el Balanceador##############################
#===== Security Group del Balanceador 
  rSGLoadbalancer:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Genero un grupo de seguridad asociacio a la VPC y habilito reglas de salida y entrada
      GroupName: SG Load Balancer  #Nombre del grupo de seguridas
      VpcId:
        Ref: rMYVPC          # Hago referencia al recurso VPC
      #Las reglas de entrada asociadas al grupo de seguridad, configuro dos reglas
      SecurityGroupIngress: 
      - IpProtocol: tcp     # Nombre (tcp, udp, icmp, icmpv6)  O Utilice -1 para especificar todos los protocolos. Si obligatorio
        FromPort: 443         #Comienzo del rango de puertos para los protocolos TCP y UDP. No obligatorio. Puerto 22 acceder a maquina SSH
        ToPort: 443          #Fin del intervalo de puertos de los protocolos TCP y UDP - No obligatorio
        CidrIp: 0.0.0.0/0   #Los intervalos de IPv4. No obligatorio
      - IpProtocol: tcp     # Nombre (tcp, udp, icmp, icmpv6)  O Utilice -1 para especificar todos los protocolos. Si obligatorio
        FromPort: 80        #Comienzo del rango de puertos para los protocolos TCP y UDP. No obligatorio. Puerto 80 navegación web
        ToPort: 80          
        CidrIp: 0.0.0.0/0   #Los intervalos de IPv4. No obligatorio
      #Las reglas de salida asociadas al grupo de seguridad, configuro 2 reglas
      SecurityGroupEgress: 
      - IpProtocol: -1     #-1 para especificar todos los protocolos
        FromPort: 0        #Comienzo del rango de puertos para los protocolos TCP y UDP. No obligatorio. Puerto 80 navegación web
        ToPort: 65535      # Puerto 65535 garantiza la entrega de paquetes de datos en la misma orden, en que fueron mandados
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "SecurityGroupBalanceador" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

#===== Creamos el balanceador de carga
  rLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: rInternetGatewayAttachment  # Acá estoy diciendo no creé la IP Elastica hasta que el atachado de del Internet Gateway este listo con la VPC
    Properties: 
      IpAddressType: ipv4
      Scheme: internet-facing              # los balanceadores de carga internos solo puede direccionar las solicitudes de los clientes que tienen acceso a la VPC para el balanceador de carga.
      SecurityGroups: 
        - !Ref rSGLoadbalancer             # Grupo de seguridad del balanceador
      Subnets:                             # Subnets publicas
        - !Ref rMYSubnetPublica      
        - !Ref rMYSubnetPublica2
      Type: application                    # Tipo de balanceador puede ser application o network
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "LoadBalancer" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName

#===== Creamos el Listener
  rListener:           #Especifica un agente de escucha para balanceadores de carga de aplicaciones
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: rLoadBalancer
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: #*** Nombre de recurso de Amazon (ARN) del grupo de destino. Especifique solo cuando Type es forward.
            Ref: rTargetGroup
      LoadBalancerArn: !Ref rLoadBalancer
      Port: '80' 
      Protocol: HTTP

#===== Creamos grupo de destino para un balanceador de carga de aplicaciones
  rTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 30        #Cantidad aproximada de tiempo, en segundos, que transcurre entre comprobaciones de estado de un destino individual. comprueba cada 30 segundos el html de la instancia
      HealthCheckPath: /                    #[Comprobaciones de estado HTTP/HTTPS] Ruta de ping que es el destino para los destinos en las comprobaciones de estado. El valor predeterminado es /.
      HealthCheckPort: 80                   # Puerto que el balanceador de carga utiliza al realizar comprobaciones de estado en los destinos
      HealthCheckProtocol: HTTP             #Protocolo que el balanceador de carga utiliza al realizar comprobaciones de estado en los destinos.
      HealthCheckTimeoutSeconds: 5          #Si durante este tiempo, en segundos, no se recibe ninguna respuesta de un destino, se considerará que la comprobación de estado no se ha superado y genera error de Timeout
      HealthyThresholdCount: 5              #Número de comprobaciones de estado consecutivas que deben superarse para considerar que un destino con estado incorrecto vuelve a estar en estado correcto.para declarar una instancia no sana debe realizar primero 5 chequeos 
      UnhealthyThresholdCount: 5            #Número de comprobaciones de estado consecutivas erróneas para que se considere que el estado de la instancia no es correcto.  Si cinco chequeos concecutivos de 30 segundos comprueba que el index.html esta caido declara la instancia como no sana y deja de enviarle trafico
      Port: '80'                              #El puerto en el que los destinos reciben tráfico.
      Protocol: HTTP
      VpcId: !Ref rMYVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ Ref: "AWS::StackName" , "TargetGroup" ]]
        -
          Key: bancolombia:application-code
          Value: !Ref pApplicationCode
        -
          Key: bancolombia:business-service
          Value: !Ref pBussiness
        -
          Key: bancolombia:cost-center
          Value: !Ref pCostCenter
        -
          Key: bancolombia:environment
          Value: !Ref pEnvironment
        -
          Key: bancolombia:pmo
          Value: !Ref pPMO
        -
          Key: bancolombia:project-name
          Value: !Ref pProjectName
#Fin de construcción de recursos para el balanceador

#===== SALIDAS=====
Outputs:  # Los Outputs me dan la salida de los recursos creados, como el nombre del recurso en el template-ID-Una Descripción- Nombre que yo le doy a cada recurso en la consola 
  Message:
    Description: Recursos creados
    Value: IDs de todos los recursos creados

  rMYVPC:
    Description: Mi VPC
    Value:
      Ref: rMYVPC
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "VPC" ]]

  rMySecurityGroup:
    Description: Mi Security Group
    Value:
      Ref: rMySecurityGroup
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "SecurityGroup" ]]

  rMyInternetGateway:
    Description: Mi Internet Gateway
    Value:
      Ref: rMyInternetGateway
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "InternetGatway" ]]

  rMYSubnetPrivada:
    Description: Mi Subnet Privada
    Value:
      Ref: rMYSubnetPrivada
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "SubnetPrivada" ]]

  rMYSubnetPublica:
    Description: Mi Subnet Publica1
    Value:
      Ref: rMYSubnetPublica
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "SubnetPublica1" ]]

  rMYSubnetPublica2:
    Description: Mi subnet Publica2
    Value:
      Ref: rMYSubnetPublica2
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "SubnetPublica2" ]]

  rNatGateway:
    Description: Mi Nat Gateway
    Value:
      Ref: rNatGateway
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "NatGateway" ]]

  rmyRouteTablePrivate:
    Description: Mi Tabla Privada
    Value:
      Ref: rmyRouteTablePrivate
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "TablaPrivada" ]]

  rmyRouteTablePublic:
    Description: Mi Tabla Publica
    Value:
      Ref: rmyRouteTablePublic
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "TablaPublica" ]]

  rElasticIP:
    Description: Mi IP Elastica
    Value:
      Ref: rElasticIP
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "ElasticIP" ]]

  rmyROLIAM:
    Description: Mi ROL IAM
    Value:
      Ref: rmyROLIAM
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "ROLIAM" ]]

  rEC2PublicOne:
    Description: Mi instancia Publica1
    Value:
      Ref: rEC2PublicOne
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "InstanciaPublica1" ]]

  rEC2PublicTwo:
    Description: Mi instancia Publica2
    Value:
      Ref: rEC2PublicTwo
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "InstanciaPublica2" ]]

  rSGLoadbalancer:
    Description: Mi Security Group Load Balancer
    Value:
      Ref: rSGLoadbalancer
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "SecurityGroupBalanceador" ]]

  rLoadBalancer:
    Description: Mi Balanceador de carga para instancias publicas
    Value:
      Ref: rLoadBalancer
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "LoadBalancer" ]]

  rTargetGroup:
    Description: grupo de destino para balanceador de carga
    Value:
      Ref: rTargetGroup
    Export:
      Name: !Join ["-", [ Ref: "AWS::StackName" , "TargetGroup" ]]
