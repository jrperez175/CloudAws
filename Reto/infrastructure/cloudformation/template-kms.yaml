AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This Cloud Formation template create a KMS Key and attach the related roles to manage it

Parameters:

  pAWSKeyManagementServicePowerUser:
    Description: Key use for
    Type: String
    Default: arn:aws:iam::aws:policy/AWSKeyManagementServicePowerUser

  pProjectName:
    Description: Name of the project
    Type: String
    Default: murex-core

  pApplicationCode:
    Description: The application code
    Type: String

  pEnvironment:
    Description: Environment where it unfolds.
    Type: String

  pSharedAccountNumber:
      Description: number share AccountId'
      Type: String

  pAmbientemurex:
      Description: Ambiente de Murex'
      Type: String

Conditions:
  cDevEnv: !Equals
    - !Ref pEnvironment
    - dev
  cQaEnv: !Equals
    - !Ref pEnvironment
    - qa


Resources:
  rIAMRoleForKMS:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ["-", [!Ref 'AWS::StackName', "role-admin"]]
      ManagedPolicyArns:
        - !Ref pAWSKeyManagementServicePowerUser
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - kms.amazonaws.com
                - s3.amazonaws.com
                - elasticfilesystem.amazonaws.com
                - transfer.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  rIAMRoleForKMSUser:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ["-", [!Ref 'AWS::StackName', "role-user"]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - kms.amazonaws.com
                - s3.amazonaws.com
                - elasticfilesystem.amazonaws.com
                - transfer.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
       - PolicyDocument:
           Version: 2012-10-17
           Statement:
            - Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey*
              Resource: !Join [ ":", ["arn:aws:kms", !Ref AWS::Region, !Ref AWS::AccountId, "key/*"]]
              Effect: Allow
         PolicyName: UserKms

  rKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Ref 'AWS::StackName'
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: key-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !Ref 'AWS::AccountId',":root"]]
            Action:
              - "kms:*"
            Resource: '*'
          - Sid: Allow key admin
            Effect: Allow
            Principal:
              AWS:
              - !GetAtt rIAMRoleForKMS.Arn
            Action:
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
              - !GetAtt rIAMRoleForKMSUser.Arn
              - !Join [ "", [ 'arn:aws:iam::', !Ref pSharedAccountNumber, ':root']]
              - !If [cDevEnv, !Join [ "", [ 'arn:aws:iam::', !Ref AWS::AccountId, ':role/Bancolombia-dev-packer-instance-profile-Rol-VSTS']] , !Ref "AWS::NoValue"]              
              - !If [cQaEnv, !Join [ "", [ 'arn:aws:iam::', 546347676389, ':root']] , !Ref "AWS::NoValue"]
              - !Join [ "", [ 'arn:aws:iam::', !Ref AWS::AccountId, ':role/', !Join [ "-", [ !Ref pApplicationCode, !Ref pProjectName, !Ref pEnvironment, 's3-databaselambdas-rol']]]]
              - !Join [ "", [ 'arn:aws:iam::', !Ref AWS::AccountId, ':role/', !Join [ "-", [ !Ref pApplicationCode, !Ref pProjectName, !Ref pEnvironment, 'ldappolicy-lambda-rol']]]]
              - !Join [ "", [ 'arn:aws:iam::', !Ref AWS::AccountId, ':role/aw0000-cloud-lb-scripts-rds-role']]
            Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Resource: "*"

  rKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join ["", ["alias/", !Ref 'pApplicationCode',"-", !Ref 'pProjectName',"-", !Ref pEnvironment,"-",!Ref pAmbientemurex,"-", "kms"]]
      TargetKeyId: !Ref rKmsKey

  rKMSLatestARN:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Join ["-", [!Ref 'AWS::StackName' ,'latest'] ]
      Type: "String"
      Value:
        Fn::GetAtt: rKmsKey.Arn
      Description: !Join [ '',  [ 'Ultima KMS  en el ambiente de ', !Ref pEnvironment , ' para la aplicacion ', !Ref pApplicationCode, '-', !Ref pAmbientemurex,  !Ref pProjectName, ' '] ]

Outputs:
  rKmsKey:
    Description: kmsKey
    Value:
       Ref: rKmsKey
    Export:
      Name: !Ref 'AWS::StackName'
