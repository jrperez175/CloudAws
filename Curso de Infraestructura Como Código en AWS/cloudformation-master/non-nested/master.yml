AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    AWS::CloudFormation::Interface: #Organiza por Label los parametros
        ParameterGroups: #Se separan los parametos en dos grupos Base de datos y Lamdas
            -
                Label: #Grupo de parametros de BD
                    default: 'Base de Datos Platzi-DynamoDB'
                Parameters:
                    - DynamoName
                    - DynamoKey
            -
                Label: #Grupo de Parametros Lamda
                    default: 'Funci贸n Lambda Platzi'
                Parameters:
                    - LambdaName
                    - LambdaRuntime
                    - LambdaBucket
                    - ZipName
        ParameterLabels: #Se asiga un label personalizado a cada parametro
            DynamoName:
                default: 'Ingrese el nombre de la tabla'
            DynamoKey:
                default: 'Ingrese el nombre de la Llave'
            LambdaName:
                default: 'Ingrese el nombre de la funci贸n lambda'
            LambdaRuntime:
                default: 'Seleccione el Runtimer de la funci贸n'
            LambdaBucket:
                default: 'Ingrese el nombre del bucket donde esta el c贸digo de la lambda'
            ZipName:
                default: 'Ingrese el nombre del .zip de la lambda'
Parameters:
    DynamoName:
        Description: Nombre
        Type: String
    DynamoKey:
        Description: Llave
        Type: String
    LambdaName:
        Description: Llave
        Type: String
    LambdaRuntime:
        Description: Runtime
        Type: String
        Default: python3.7
        AllowedValues: #Despliega una lista de valores permitidos
            - python3.7
            - python2.7
            - ruby2.5
            - nodejs8.10
            - java8
            - dotnetcore2.1
    LambdaBucket:
        Description: Bucket
        Type: String
    ZipName:
        Description: Zip
        Type: String 
Resources:
    DynamoPlatzi:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Ref DynamoName
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
        - AttributeName: !Ref DynamoKey
          AttributeType: S
        KeySchema:
        - AttributeName: !Ref DynamoKey
          KeyType: HASH
        SSESpecification:
          SSEEnabled: true
    
    RestApiAD: 
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: api-platzi
    Method:
      Type: AWS::ApiGateway::Method
      DependsOn: DynamoPlatzi
      Properties:
        HttpMethod: POST
        ResourceId: !GetAtt RestApiAD.RootResourceId
        RestApiId: !Ref RestApiAD
        AuthorizationType: NONE
        MethodResponses:
            - StatusCode: 200
              ResponseModels: { "application/json": "Empty" }
        Integration:
          Type: AWS
          IntegrationHttpMethod: "POST"
          Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
          IntegrationResponses:
            - StatusCode: 200
              ResponseTemplates: {"application/json": ""}
        OperationName: !Sub ${AWS::AccountId}

    ApiGatewayResource: # Trabaja en conjunto con el APIRest para responder a las consultas de la BD
      Type: AWS::ApiGateway::Resource
      DependsOn: DynamoPlatzi
      Properties:
        ParentId: !GetAtt RestApiAD.RootResourceId
        PathPart: 'lambda'
        RestApiId: !Ref RestApiAD

    ApiGatewayModel: #Se encarga de hacer la respuesta en formato JSON
      Type: AWS::ApiGateway::Model
      DependsOn: DynamoPlatzi
      Properties:
        ContentType: 'application/json'
        RestApiId: !Ref RestApiAD
        Schema: {}

    ApiGatewayStage: #Se encarga de pasar a produccion la Version 0 de la api para que quede desplegada
        Type: AWS::ApiGateway::Stage
        DependsOn: DynamoPlatzi
        Properties:
          DeploymentId: !Ref ApiGatewayDeployment
          Description: Lambda API Stage v0
          RestApiId: !Ref RestApiAD
          StageName: 'v0'

    ApiGatewayDeployment: #Metodos de consula que tiene como referencia la Lamda
      Type: AWS::ApiGateway::Deployment
      DependsOn: Method
      Properties:
        Description: Lambda API Deployment
        RestApiId: !Ref RestApiAD

    ApiGatewayIamRole: #Rol de ApiGateway para que interactue con los otros recursos de aws
      Type: AWS::IAM::Role
      DependsOn: DynamoPlatzi
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: ''
              Effect: 'Allow'
              Principal:
                Service:
                  - 'apigateway.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Path: '/'
        Policies:
          - PolicyName: LambdaAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action: 'lambda:*'
                  Resource: !GetAtt LambdaFunction.Arn

    LambdaFunction:
      Type: AWS::Lambda::Function
      DependsOn: LambdaRole
      Properties:
        Code:
            S3Bucket: !Ref LambdaBucket
            S3Key: !Ref ZipName
        FunctionName: !Ref LambdaName
        Handler: lambda_function.lambda_handler
        Runtime: !Ref LambdaRuntime
        MemorySize: 512
        Timeout: 600
        Role: !GetAtt LambdaRole.Arn
        Environment:
            Variables:
                DYNAMO_PLATZI: !Ref DynamoPlatzi

    LambdaPolicyEC2: #Politicas asiganadas a las funcion Lamda sobre EC2
        Type: AWS::IAM::ManagedPolicy
        DependsOn: DynamoPlatzi
        Properties:
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                      Effect: Allow
                      Action:
                          - ec2:DisassociateAddress
                          - ec2:CreateDhcpOptions
                          - ec2:ReplaceRouteTableAssociation
                          - ec2:RunScheduledInstances
                          - ec2:RequestSpotFleet
                          - ec2:DisableVgwRoutePropagation
                          - ec2:AssociateVpcCidrBlock
                          - ec2:ReleaseHosts
                          - ec2:ReplaceRoute
                          - ec2:DisassociateVpcCidrBlock
                          - ec2:DeleteNetworkInterfacePermission
                          - ec2:DescribeNetworkInterfaces
                          - ec2:StartInstances
                          - ec2:DescribeNetworkInterfaceAttribute
                          - ec2:CreateRoute
                          - ec2:ReplaceNetworkAclEntry
                          - ec2:CreateSecurityGroup
                          - ec2:CreateNetworkAcl
                          - ec2:DescribeNetworkInterfacePermissions
                          - ec2:TerminateInstances
                          - ec2:AcceptVpcEndpointConnections
                          - ec2:DeleteNetworkInterface
                          - ec2:CreateRouteTable
                          - ec2:RunInstances
                          - ec2:StopInstances
                          - ec2:DisassociateRouteTable
                          - ec2:DisassociateSubnetCidrBlock
                          - ec2:ModifyHosts
                          - ec2:ReplaceNetworkAclAssociation
                          - ec2:CreateVolume
                          - ec2:CreateNetworkInterface
                          - ec2:DetachVpnGateway
                          - ec2:CreateDefaultVpc
                          - ec2:DisassociateIamInstanceProfile
                          - ec2:CreateVpcEndpoint
                          - ec2:DisableVpcClassicLink
                          - ec2:CreateSubnet
                      Resource:
                          - "*"
    LambdaPolicyDynamo: #Politicas asiganadas a las funcion Lamda sobre dynamo
        Type: AWS::IAM::ManagedPolicy
        Properties:
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                      Effect: Allow
                      Action:
                          - dynamodb:PutItem
                          - dynamodb:UpdateItem
                          - dynamodb:GetItem
                          - dynamodb:*
                      Resource:
                          - "*"

    LambdaPolicyCW: ##Politicas asiganadas a las funcion Lamda sobre CW
        Type: AWS::IAM::ManagedPolicy
        Properties:
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                      Effect: Allow
                      Action:
                          - logs:*
                          - cloudwatch:*
                          - xray:*
                      Resource:
                          - "*"

    LambdaRole: #Se crea el Rol de la lambda
      Type: AWS::IAM::Role
      Properties:
        ManagedPolicyArns:
          - !Ref LambdaPolicyDynamo
          - !Ref LambdaPolicyEC2
          - !Ref LambdaPolicyCW
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
    LambdaPolicyS3:
        Type: AWS::IAM::ManagedPolicy
        Properties:
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                      Effect: Allow
                      Action:
                          - s3:ListAllMyBuckets
                          - s3:HeadBucket
                          - s3:ListObjects
                      Resource:
                          - "*"
                    -
                      Effect: Allow
                      Action:
                          - s3:*
                      Resource:
                          - "*"                          
    lambdaApiGatewayInvoke: #Permite que el api Gateway pueda disparar la Lamda
      Type: "AWS::Lambda::Permission"
      DependsOn: LambdaFunction
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: !Ref "LambdaFunction"
        Principal: "apigateway.amazonaws.com"
        SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApiAD}/*/POST/"


Outputs:
  LambdaPolicyDynamo:
    Value: !Ref LambdaPolicyDynamo
    Export:
        Name: LambdaPolicyDynamo
  LambdaPolicyEC2:
    Value: !Ref LambdaPolicyEC2
    Export:
        Name: LambdaPolicyEC2
  LambdaPolicyCW:
    Value: !Ref LambdaPolicyCW
    Export:
        Name: LambdaPolicyCW
  LambdaFunction:
    Value: !GetAtt LambdaFunction.Arn
    Export:
        Name: LambdaFunction       
  RootResourceId:
    Value: !Ref RestApiAD
    Export:
      Name: RootResourceId

